#include <iostream>
#include <algorithm>
#include <vector>
#include <cstring>
#include <time.h>
using namespace std;

int moving[10];
pair<int,int> map[33][5] = {
	{{1,2},{2,4},{3,6},{4,8},{5,10}}, // 0¿¡¼­ºÎÅÍ 1~5Ä­
	{{2,4},{3,6},{4,8},{5,10},{6,12}}, // 1¿¡¼­ºÎÅÍ 1~5Ä­
	{{3,6},{4,8},{5,10},{6,12},{7,14}}, // 2
	{{4,8},{5,10},{6,12},{7,14},{8,16}}, // 3
	{{5,10},{6,12},{7,14},{8,16},{9,18}}, // 4
	{{22,13},{23,16},{24,19},{25,25},{30,30}}, // 5
	{{7,14},{8,16},{9,18},{10,20},{11,22}}, // 6
	{{8,16},{9,18},{10,20},{11,22},{12,24}}, // 7
	{{9,18},{10,20},{11,22},{12,24},{13,26}}, // 8
	{{10,20},{11,22},{12,24},{13,26},{14,28}}, // 9
	{{32,22},{31,24},{25,25},{30,30},{29,35}}, // 10
	{{12,24},{13,26},{14,28},{15,30},{16,32}}, // 11
	{{13,26},{14,28},{15,30},{16,32},{17,34}}, // 12
	{{14,28},{15,30},{16,32},{17,34},{18,36}}, // 13
	{{15,30},{16,32},{17,34},{18,36},{19,38}}, // 14 
	{{28,28},{27,27},{26,26},{25,25},{30,30}}, // 15
	{{17,34},{18,36},{19,38},{20,40},{21,0}}, // 16 
	{{18,36},{19,38},{20,40},{21,0},{21,0}}, // 17
	{{19,38},{20,40},{21,0},{21,0},{21,0}}, // 18
	{{20,40},{21,0},{21,0},{21,0},{21,0}}, // 19
	{{21,0},{21,0},{21,0},{21,0},{21,0}}, // 20
	{{21,0},{21,0},{21,0},{21,0},{21,0}}, // 21
	{{23,16},{24,19},{25,25},{30,30},{29,35}}, // 22
	{{24,19},{25,25},{30,30},{29,35},{20,40}}, // 23
	{{25,25},{30,30},{29,35},{20,40},{21,0}}, // 24 
	{{30,30},{29,35},{20,40},{21,0},{21,0}}, // 25
	{{25,25},{30,30},{29,35},{20,40},{21,0}}, // 26
	{{26,26},{25,25},{30,30},{29,35},{20,40}}, // 27
	{{27,27},{26,26},{25,25},{30,30},{29,35}}, // 28
	{{20,40},{21,0},{21,0},{21,0},{21,0}}, // 29
	{{29,35},{20,40},{21,0},{21,0},{21,0}}, // 30
	{{25,25},{30,30},{29,35},{20,40},{21,0}}, // 31
	{{31,24},{25,25},{30,30},{29,35},{20,40}}  // 32 
};

void input() {
	for (int i = 0; i < 10; i++) {
		cin >> moving[i];
	}
}

int answer = 0;
int pos[4];
void go(vector<int>list) {
	memset(pos, 0, sizeof(pos));
	int profit = 0;
	for (int i = 0; i < list.size(); i++) {
		int horse = list[i];
		int jump = moving[i];
		int cur = pos[horse];
		int nxt = map[cur][jump - 1].first;
		int tmp = map[cur][jump - 1].second;
		bool occupied = false;
		for (int j = 0; j < 4; j++) {
			if (nxt != 21 && nxt == pos[j]) {
				occupied = true;
			}
		}
		if (occupied) {
			return;
		}
		pos[list[i]] = nxt;
		profit += tmp;
	}
	answer = max(answer, profit);
}

vector<int>list;
void permutation(int cnt) {
	if (cnt == 10) {
		go(list);
	}
	else {
		for (int i = 0; i < 4; i++) {
			list.push_back(i);
			permutation(cnt + 1);
			list.pop_back();
		}
	}
}

void solve() {
	permutation(0);
	cout << answer;
}

int main() {
	freopen("Text.txt", "r", stdin);
	input();
	solve();
	return 0;
}